/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * mainFrame.java
 *
 * Created on 2010-4-17, 16:23:06
 */
package mainframe;

import java.awt.event.WindowEvent;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Administrator
 */
public class MainFrame extends javax.swing.JFrame {

    private CheckNode rootNode = new CheckNode("");
    private File rootPath;
    private File dstPath;
    private String prjName;
    private DefaultTreeModel dfModel;
    private Modifier modifier;
    private boolean isModified;

    /** Creates new form mainFrame */
    public MainFrame() {
        initComponents();
        jTreeDir.setVisible(false);
        dfModel = (DefaultTreeModel) jTreeDir.getModel();
        dstPath = new File("bin/");
        jTextDir.setText(".\\bin");
        rootPath = new File("./temp/");
        modifier = new Modifier();
        jProgress.setMaximum(100);
        jProgress.setMinimum(0);
        jCheckBoxJsp.setSelected(true);
        jCheckBoxShtml.setSelected(true);
        jCheckBoxHtml.setSelected(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rootNode.setValue("");
        jTreeDir = new javax.swing.JTree(rootNode);
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonExecute = new javax.swing.JButton();
        jComboBoxType = new javax.swing.JComboBox();
        jButtonBrowse = new javax.swing.JButton();
        jTextDir = new javax.swing.JTextField();
        jProgress = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextUserName = new javax.swing.JTextField();
        jTextPassword = new javax.swing.JTextField();
        jLabelNote = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextDbName = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jCheckBoxJsp = new javax.swing.JCheckBox();
        jCheckBoxShtml = new javax.swing.JCheckBox();
        jCheckBoxHtml = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jTextRequests = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemOpenDir = new javax.swing.JMenuItem();
        jMenuItemOpenWAR = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Directory Hierarchy"));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        jTreeDir.setCellRenderer(new CheckRenderer());
        jTreeDir.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTreeDir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTreeDirMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeDir);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Export Parameter"));

        jLabel1.setText("Export Path:");

        jButtonExecute.setText("Execute");
        jButtonExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecuteActionPerformed(evt);
            }
        });

        jComboBoxType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Directory", "WAR Archive"}));

        jButtonBrowse.setText("Browse");
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        jTextDir.setEditable(false);

        jLabel2.setText("Export Type:");

        jLabel3.setText("Database Username:");

        jLabel4.setText("Database Password:");

        jLabel5.setText("Configure logging database here (MySQL):");

        jLabel9.setText("Database Name:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextDir, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonBrowse))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(28, 28, 28)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextDbName)
                            .addComponent(jTextPassword)
                            .addComponent(jTextUserName, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonExecute, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelNote, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jProgress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowse))
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextDbName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(jLabelNote, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonExecute)
                    .addComponent(jProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Runtime Parameter"));

        jLabel6.setText("Type of requests to be tracked:");

        jCheckBoxJsp.setText(".jsp");

        jCheckBoxShtml.setText(".shtml");

        jCheckBoxHtml.setText(".html");

        jLabel7.setText("Other:");

        jLabel8.setText("Delimited by semi-colon");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jCheckBoxJsp)
                        .addGap(24, 24, 24)
                        .addComponent(jCheckBoxShtml)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxHtml))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jTextRequests, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE))
                    .addComponent(jLabel8))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxJsp)
                    .addComponent(jCheckBoxShtml)
                    .addComponent(jCheckBoxHtml))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextRequests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jMenu1.setText("File");
        jMenu1.setPreferredSize(new java.awt.Dimension(50, 19));

        jMenuItemOpenDir.setText("Open source directory");
        jMenuItemOpenDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenDirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemOpenDir);

        jMenuItemOpenWAR.setText("Open source WAR archive");
        jMenuItemOpenWAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenWARActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemOpenWAR);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE))
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-808)/2, (screenSize.height-634)/2, 808, 634);
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeDirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTreeDirMouseClicked
        int nRow = jTreeDir.getRowForLocation(evt.getX(), evt.getY());
        TreePath sltedPath = jTreeDir.getPathForRow(nRow);
        if (sltedPath == null) {
            return;
        }
        CheckNode node = (CheckNode) sltedPath.getLastPathComponent();
        node.setSelected(!node.isSelected());
        ((DefaultTreeModel) jTreeDir.getModel()).nodeChanged(node);
        jTreeDir.invalidate();
        jTreeDir.revalidate();
    }//GEN-LAST:event_jTreeDirMouseClicked

    private void jMenuItemOpenDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenDirActionPerformed
        JFileChooser dirChooser = new JFileChooser();
        dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        dirChooser.setMultiSelectionEnabled(false);
        dirChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        int retValue = dirChooser.showDialog(this, "Open");
        if (retValue != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File prjPath = dirChooser.getSelectedFile();
        
        jProgress.setValue(0);
        jLabelNote.setText("");

        if (!rootPath.exists()) {
            rootPath.mkdir();
        }
        File[] files = rootPath.listFiles();
        for (int i = 0; i < files.length; i++) {
            FileManager.deleteAllFiles(files[i]);
        }

        files = prjPath.listFiles();
        int i = 0;
        for (i = 0; i < files.length; i++) {
            File file = files[i];
            if (file.getName().equals("WebRoot")) {
                prjPath = file;
                break;
            }
        }
        if (i == files.length) {
            javax.swing.JOptionPane.showMessageDialog(this, "This is not a typical J2EE project");
            return;
        }

        jTreeDir.setVisible(true);
        FileManager.copyAllFiles(prjPath, rootPath);
        isModified = false;

        prjName = prjPath.getParentFile().getName();
        rootNode.setValue(prjName);
        rootNode.setSelected(true);
        rootNode.removeAllChildren();
        dfModel.nodeChanged(rootNode);
        files = rootPath.listFiles();
        for (i = 0; i < files.length; i++) {
            this.viewAllFiles(files[i], rootNode);
        }
        dfModel.nodeStructureChanged(rootNode);
    }//GEN-LAST:event_jMenuItemOpenDirActionPerformed

    private void jMenuItemOpenWARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenWARActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setDebugGraphicsOptions(JFileChooser.OPEN_DIALOG);
        fileChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.getName().toLowerCase().matches(".*\\.war") | f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "*.war";
            }
        });
        int retValue = fileChooser.showDialog(this, "Open");
        if (retValue != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File warFile = fileChooser.getSelectedFile();
        if (!warFile.getName().toLowerCase().endsWith(".war")) {
            javax.swing.JOptionPane.showMessageDialog(this, "This is not a typical J2EE project");
            return;
        }

        jProgress.setValue(0);
        jLabelNote.setText("");
        
        if (!rootPath.exists()) {
            rootPath.mkdir();
        }
        File[] files = rootPath.listFiles();
        for (int i = 0; i < files.length; i++) {
            FileManager.deleteAllFiles(files[i]);
        }

        jTreeDir.setVisible(true);
        try {
            FileManager.extractFromZipFile(warFile, rootPath);
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error while unzipping WAR archive");
            ex.printStackTrace();
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        isModified = false;

        prjName = warFile.getName().substring(0, warFile.getName().length() - 4);
        rootNode.setValue(prjName);
        rootNode.setSelected(true);
        rootNode.removeAllChildren();
        dfModel.nodeChanged(rootNode);
        files = rootPath.listFiles();
        for (int i = 0; i < files.length; i++) {
            this.viewAllFiles(files[i], rootNode);
        }
        dfModel.nodeStructureChanged(rootNode);
    }//GEN-LAST:event_jMenuItemOpenWARActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        onExit();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jButtonExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecuteActionPerformed
        if (jTreeDir.isVisible() == false) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please choose a project to work on");
            return;
        }
        if (isModified == true) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please import a fresh project to work on");
            return;
        }
        String dbUserName = jTextUserName.getText();
        if (dbUserName == null || dbUserName.equals("")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Database username cannot be empty");
            return;
        }
        String dbPassword = jTextPassword.getText();
        if (dbPassword == null || dbPassword.equals("")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Database password cannot be empty");
            return;
        }
        String dbName = jTextDbName.getText();
        if (dbName == null || dbName.equals("")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Database name cannot be empty");
            return;
        }
        List<String> requests = new ArrayList<String>();
        if (jCheckBoxJsp.isSelected()) {
            requests.add(jCheckBoxJsp.getText());
        }
        if (jCheckBoxShtml.isSelected()) {
            requests.add(jCheckBoxShtml.getText());
        }
        if (jCheckBoxHtml.isSelected()) {
            requests.add(jCheckBoxHtml.getText());
        }
        StringTokenizer tokenizer = new StringTokenizer(jTextRequests.getText().trim(), ";");
        while (tokenizer.hasMoreTokens()) {
            requests.add(tokenizer.nextToken().toLowerCase());
        }
        
        Generate generate = new Generate();
        generate.setRootPath(rootPath);
        generate.setDstPath(dstPath);
        generate.setModifier(modifier);
        generate.setType(jComboBoxType.getSelectedItem().toString());
        generate.setPrjName(prjName);
        generate.setRootNode(rootNode);
        generate.setParentComponent(this);
        generate.setProgressBar(jProgress);
        generate.setNoteLabel(jLabelNote);
        generate.setDBUserName(dbUserName);
        generate.setDBPassword(dbPassword);
        generate.setDBName(dbName);
        generate.setRequests(requests);
        Thread executeThread = new Thread(generate);
        executeThread.start();
        isModified = true;
    }//GEN-LAST:event_jButtonExecuteActionPerformed

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
        JFileChooser dirChooser = new JFileChooser();
        dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        dirChooser.setMultiSelectionEnabled(false);
        dirChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        int retValue = dirChooser.showDialog(this, "Open");
        if (retValue != JFileChooser.APPROVE_OPTION) {
            return;
        }
        dstPath = dirChooser.getSelectedFile();
        jTextDir.setText(dstPath.getAbsolutePath());
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    @Override
    protected void processWindowEvent(WindowEvent e) {
        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            onExit();
        } else {
            super.processWindowEvent(e);
        }
    }

    private void onExit() {
        int iOption = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure to exit", "Message", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);
        if (iOption == javax.swing.JOptionPane.YES_OPTION) {
            this.setVisible(false);
            this.dispose();
        } else {
            return;
        }
    }

    private void viewAllFiles(File f, CheckNode parent) {
        String fileName = f.getName();
        CheckNode node = new CheckNode(f.getName());
        node.setSelected(true);
        if (!f.isDirectory()) {
            if (fileName.toLowerCase().endsWith(".class") ||
                    fileName.toLowerCase().endsWith(".jsp")) {
                parent.add(node);
            }
            return;
        }
        parent.add(node);
        File[] files = f.listFiles();
        for (int i = 0; i < files.length; i++) {
            this.viewAllFiles(files[i], node);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonExecute;
    private javax.swing.JCheckBox jCheckBoxHtml;
    private javax.swing.JCheckBox jCheckBoxJsp;
    private javax.swing.JCheckBox jCheckBoxShtml;
    private javax.swing.JComboBox jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelNote;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemOpenDir;
    private javax.swing.JMenuItem jMenuItemOpenWAR;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgress;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextDbName;
    private javax.swing.JTextField jTextDir;
    private javax.swing.JTextField jTextPassword;
    private javax.swing.JTextField jTextRequests;
    private javax.swing.JTextField jTextUserName;
    private javax.swing.JTree jTreeDir;
    // End of variables declaration//GEN-END:variables
}
